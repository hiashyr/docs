#!/usr/bin/env python3
import os
import shutil
import sqlite3
from pathlib import Path

def build_and_create_docset():
    """–°–æ–±–∏—Ä–∞–µ—Ç Sphinx –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ—Ç docset"""
    
    print("üöÄ –°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # –°–æ–±–∏—Ä–∞–µ–º HTML
    result = os.system("make html")
    if result != 0:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏!")
        return
    
    # –°–æ–∑–¥–∞–µ–º docset —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    docset_dir = Path("My Django Project.docset")
    if docset_dir.exists():
        shutil.rmtree(docset_dir)
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π docset")
    
    (docset_dir / "Contents/Resources/Documents").mkdir(parents=True)
    print("üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫")
    
    # –ö–æ–ø–∏—Ä—É–µ–º HTML
    html_dir = Path("build/html")
    if not html_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ build/html –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    copied_files = 0
    for item in html_dir.rglob("*"):
        if item.is_file():
            relative = item.relative_to(html_dir)
            dest = docset_dir / "Contents/Resources/Documents" / relative
            dest.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(item, dest)
            copied_files += 1
    
    print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {copied_files}")
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞
    create_search_index(docset_dir)
    
    # Info.plist
    create_info_plist(docset_dir)
    
    print(f"‚úÖ Docset —Å–æ–∑–¥–∞–Ω: {docset_dir}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ Zeal
    copy_to_zeal(docset_dir)

    # –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    icon_src = Path("icon.png")
    if icon_src.exists():
        shutil.copy2(icon_src, docset_dir / "icon.png")
        print("üé® –ò–∫–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ docset")
    else:
        print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª icon.png –≤ –ø–∞–ø–∫–µ docs/")

def create_search_index(docset_dir):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å"""
    conn = sqlite3.connect(docset_dir / "Contents/Resources/docSet.dsidx")
    cur = conn.cursor()
    
    cur.execute('''
        CREATE TABLE searchIndex(
            id INTEGER PRIMARY KEY,
            name TEXT,
            type TEXT,
            path TEXT
        )
    ''')
    cur.execute('CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path)')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∏–Ω–¥–µ–∫—Å
    index_entries = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        ('–ì–ª–∞–≤–Ω–∞—è', 'Guide', 'index.html'),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'Guide', 'setup.html'),
        
        # –ö–æ–º–∞–Ω–¥—ã Django
        ('runserver', 'Command', 'setup.html#id5'),
        ('makemigrations', 'Command', 'setup.html#id6'),
        ('migrate', 'Command', 'setup.html#id6'),
        ('startapp', 'Command', 'setup.html#id6'),
        ('createsuperuser', 'Command', 'setup.html#id6'),
        
        # –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        ('–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ', 'Concept', 'setup.html#id2'),
        ('requirements.txt', 'Concept', 'setup.html#id7'),
        ('Django –ø—Ä–æ–µ–∫—Ç', 'Concept', 'setup.html#id3'),
        
        # –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
        ('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', 'Guide', 'project-structure.html'),
        ('–ú–æ–¥–µ–ª–∏', 'Guide', 'models.html'),
        ('–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è', 'Guide', 'views.html'),
        ('–®–∞–±–ª–æ–Ω—ã', 'Guide', 'templates.html'),
        ('URLs', 'Guide', 'urls.html'),
        ('–§–æ—Ä–º—ã', 'Guide', 'forms.html'),
        ('–ê–¥–º–∏–Ω–∫–∞', 'Guide', 'admin.html'),
    ]
    
    cur.executemany(
        'INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?, ?, ?)',
        index_entries
    )
    
    conn.commit()
    conn.close()
    print(f"üîç –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏–Ω–¥–µ–∫—Å: {len(index_entries)}")
    
def create_info_plist(docset_dir):
    """–°–æ–∑–¥–∞–µ—Ç Info.plist –¥–ª—è docset"""
    info_plist = '''<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleIdentifier</key>
    <string>django-russian-docs</string>
    <key>CFBundleName</key>
    <string>–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è Django –Ω–∞ —Ä—É—Å—Å–∫–æ–º</string>
    <key>DocSetPlatformFamily</key>
    <string>mydjangoproject</string>
    <key>dashIndexFilePath</key>
    <string>index.html</string>
    <key>isJavaScriptEnabled</key>
    <true/>
    <key>isDashDocset</key>
    <true/>
</dict>
</plist>'''
    
    with open(docset_dir / "Contents/Info.plist", "w") as f:
        f.write(info_plist)
    print("‚öôÔ∏è –°–æ–∑–¥–∞–Ω Info.plist")

def copy_to_zeal(docset_dir):
    """–ö–æ–ø–∏—Ä—É–µ—Ç docset –≤ Zeal"""
    zeal_path = Path.home() / 'Library/Application Support/Zeal/Zeal/docsets'
    zeal_path.mkdir(parents=True, exist_ok=True)
    
    dest_path = zeal_path / docset_dir.name
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if dest_path.exists():
        shutil.rmtree(dest_path)
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ Zeal")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤ Zeal
    shutil.copytree(docset_dir, dest_path)
    print(f"‚úÖ Docset —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ Zeal: {dest_path}")

if __name__ == "__main__":
    build_and_create_docset()