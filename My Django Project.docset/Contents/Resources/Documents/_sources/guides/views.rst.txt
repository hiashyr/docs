Представления (Views)
=====================

Функциональные представления
----------------------------

.. code-block:: python

   from django.shortcuts import render, get_object_or_404
   from django.contrib.auth.decorators import login_required
   from .models import Task

   @login_required
   def task_list(request):
       """Список задач текущего пользователя"""
       tasks = Task.objects.filter(assignee=request.user)
       return render(request, 'tasks/list.html', {'tasks': tasks})

   def task_detail(request, task_id):
       """Детальная информация о задаче"""
       task = get_object_or_404(Task, id=task_id, assignee=request.user)
       return render(request, 'tasks/detail.html', {'task': task})

Класс-базированные представления
--------------------------------

.. code-block:: python

   from django.views.generic import ListView, DetailView, CreateView
   from django.contrib.auth.mixins import LoginRequiredMixin
   from .models import Task
   from .forms import TaskForm

   class TaskListView(LoginRequiredMixin, ListView):
       model = Task
       template_name = 'tasks/list.html'
       context_object_name = 'tasks'
       
       def get_queryset(self):
           return Task.objects.filter(assignee=self.request.user)

   class TaskCreateView(LoginRequiredMixin, CreateView):
       model = Task
       form_class = TaskForm
       template_name = 'tasks/create.html'
       success_url = '/tasks/'
       
       def form_valid(self, form):
           form.instance.assignee = self.request.user
           return super().form_valid(form)