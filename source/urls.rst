Настройка URL-маршрутов
========================

В этом разделе мы настроим систему маршрутизации для нашего Django приложения. URL-конфигурация определяет, какие представления будут обрабатывать запросы по определенным адресам.

Основной файл urls.py
---------------------

Файл ``ekz/urls.py`` содержит все маршруты нашего приложения и связывает URL-адреса с соответствующими представлениями.

Импорт необходимых модулей
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   from django.contrib import admin
   from django.urls import path
   from front import views
   from django.conf.urls.static import static
   from django.conf import settings

Импортируются стандартные модули Django: ``admin`` для админ-панели, ``path`` для создания маршрутов, модуль представлений из приложения ``front``, а также функции для работы со статическими и медиа-файлами.

Определение основного списка URL-паттернов
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   urlpatterns = [

Начало списка URL-паттернов. Каждый паттерн связывает определенный URL-адрес с соответствующим представлением.

Маршруты администрирования и аутентификации
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

       # Администрирование и аутентификация
       path('admin/', admin.site.urls, name='admin'),
       path('', views.main_page, name='main_page'),
       path('register/', views.register_view, name='register'),
       path('login/', views.login_view, name='login'),
       path('logout/', views.logout_view, name='logout'),
       path('profile/', views.profile_view, name='profile'),

**Админ-панель:** ``admin/`` - стандартный маршрут Django административной панели.

**Главная страница:** ``''`` (корневой URL) отображает главную страницу через ``main_page`` представление.

**Аутентификация:** 
- ``register/`` - регистрация новых пользователей
- ``login/`` - вход в систему
- ``logout/`` - выход из системы
- ``profile/`` - личный кабинет пользователя

Маршруты каталога товаров
^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

       # 1. Каталог товаров
       path('catalog/', views.catalog_view, name='catalog'),
       path('product/<int:product_id>/', views.product_detail_view, name='product_detail'),

**Каталог товаров:** ``catalog/`` - отображает список всех товаров с возможностью фильтрации.

**Детальная страница товара:** ``product/<int:product_id>/`` - динамический маршрут, где ``product_id`` преобразуется в целое число и передается в представление для отображения информации о конкретном товаре.

Маршруты корзины покупок
^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

       # 2. Корзина
       path('cart/', views.cart_view, name='cart'),
       path('cart/add/<int:product_id>/', views.add_to_cart, name='add_to_cart'),
       path('cart/update/<int:item_id>/', views.update_cart_item, name='update_cart_item'),
       path('cart/remove/<int:item_id>/', views.remove_from_cart, name='remove_from_cart'),

**Просмотр корзины:** ``cart/`` - отображает содержимое корзины текущего пользователя.

**Управление корзиной:**
- ``cart/add/<int:product_id>/`` - добавление товара в корзину
- ``cart/update/<int:item_id>/`` - обновление количества товара
- ``cart/remove/<int:item_id>/`` - удаление товара из корзины

Все маршруты корзины используют целочисленные параметры для идентификации товаров и элементов корзины.

Маршруты заказов
^^^^^^^^^^^^^^^^

.. code-block:: python

       # 3. Заказы
       path('checkout/', views.checkout_view, name='checkout'),
       path('order/success/<int:order_id>/', views.order_success_view, name='order_success'),
       path('orders/', views.orders_view, name='orders'),
       path('order/<int:order_id>/', views.order_detail_view, name='order_detail'),
       path('contacts/', views.contacts_view, name='contacts'),

**Оформление заказа:** ``checkout/`` - процесс оформления заказа из корзины.

**Управление заказами:**
- ``order/success/<int:order_id>/`` - страница подтверждения заказа
- ``orders/`` - список всех заказов пользователя
- ``order/<int:order_id>/`` - детальная информация о конкретном заказе

**Контакты:** ``contacts/`` - статическая страница с контактной информацией.

Завершение основного списка URL-паттернов
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   ]

Конец определения основного списка маршрутов. Все основные URL-адреса приложения теперь связаны с соответствующими представлениями.

Обработка медиа-файлов в режиме разработки
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code-block:: python

   if settings.DEBUG:
       urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

В режиме разработки (``DEBUG = True``) добавляется обслуживание медиа-файлов. Это позволяет Django раздавать загруженные пользователями файлы (изображения товаров, аватары) непосредственно через development сервер без необходимости настройки веб-сервера.

Структура URL-адресов приложения
--------------------------------

.. list-table:: Карта URL-адресов
   :header-rows: 1
   :widths: 30 40 30

   * - URL-адрес
     - Назначение
     - Представление
   * - ``/``
     - Главная страница
     - ``main_page``
   * - ``/admin/``
     - Админ-панель
     - ``admin.site.urls``
   * - ``/register/``
     - Регистрация
     - ``register_view``
   * - ``/login/``
     - Вход в систему
     - ``login_view``
   * - ``/catalog/``
     - Каталог товаров
     - ``catalog_view``
   * - ``/product/1/``
     - Товар #1
     - ``product_detail_view``
   * - ``/cart/``
     - Корзина
     - ``cart_view``
   * - ``/checkout/``
     - Оформление заказа
     - ``checkout_view``
   * - ``/orders/``
     - История заказов
     - ``orders_view``

Особенности реализации
----------------------

**Именованные маршруты:** Каждый path имеет параметр ``name=``, что позволяет ссылаться на маршруты в шаблонах через ``{% url 'name' %}`` без жесткого кодирования URL.

**Типизированные параметры:** Использование ``<int:product_id>`` обеспечивает автоматическое преобразование строковых параметров URL в целые числа.

**Логическая группировка:** Маршруты сгруппированы по функциональным блокам с комментариями для улучшения читаемости.

**Безопасность:** В режиме production медиа-файлы должны обслуживаться веб-сервером (Nginx, Apache), а не Django.

.. note::

   Для использования именованных маршрутов в шаблонах убедитесь, что все необходимые параметры передаются в тег ``{% url %}``, например: ``{% url 'product_detail' product.id %}``.

.. warning::

   В production окружении обязательно установите ``DEBUG = False`` и настройте обслуживание статических и медиа-файлов через веб-сервер.